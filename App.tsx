
import React, { useState, useCallback } from 'react';
import { GoogleGenAI, Type } from '@google/genai';
import type { Chat } from '@google/genai';
import type { StoryPreferences, StoryResponse } from './types';
import { StoryForm } from './components/StoryForm';
import { StoryDisplay } from './components/StoryDisplay';

const API_KEY = process.env.API_KEY;

const App: React.FC = () => {
  const [isStoryStarted, setIsStoryStarted] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [storyParts, setStoryParts] = useState<string[]>([]);
  const [choices, setChoices] = useState<string[]>([]);
  const [chat, setChat] = useState<Chat | null>(null);

  const handleStartStory = useCallback(async (preferences: StoryPreferences) => {
    setIsLoading(true);
    setError(null);
    setStoryParts([]);
    setChoices([]);

    if (!API_KEY) {
      setError("API key is not configured.");
      setIsLoading(false);
      return;
    }

    try {
      const ai = new GoogleGenAI({ apiKey: API_KEY });

      const responseSchema = {
        type: Type.OBJECT,
        properties: {
          storyPart: {
            type: Type.STRING,
            description: "M·ªôt ƒëo·∫°n c·ªßa c√¢u chuy·ªán."
          },
          choices: {
            type: Type.ARRAY,
            description: "M·ªôt m·∫£ng g·ªìm 2 chu·ªói cho l·ª±a ch·ªçn ti·∫øp theo c·ªßa ng∆∞·ªùi d√πng. M·∫£ng n√†y s·∫Ω tr·ªëng n·∫øu c√¢u chuy·ªán k·∫øt th√∫c.",
            items: {
              type: Type.STRING,
            }
          }
        },
        required: ["storyPart", "choices"],
      };

      const systemInstruction = `B·∫°n l√† m·ªôt ng∆∞·ªùi k·ªÉ chuy·ªán chuy√™n nghi·ªáp cho tr·∫ª em. Nhi·ªám v·ª• c·ªßa b·∫°n l√† t·∫°o ra m·ªôt c√¢u chuy·ªán t∆∞∆°ng t√°c "ch·ªçn cu·ªôc phi√™u l∆∞u c·ªßa ri√™ng b·∫°n".
      Sau khi vi·∫øt m·ªôt ƒëo·∫°n c·ªßa c√¢u chuy·ªán, b·∫°n PH·∫¢I cung c·∫•p ch√≠nh x√°c hai l·ª±a ch·ªçn ƒë·ªÉ ng∆∞·ªùi ƒë·ªçc quy·∫øt ƒë·ªãnh ƒëi·ªÅu g√¨ s·∫Ω x·∫£y ra ti·∫øp theo.
      ƒê·ªãnh d·∫°ng ph·∫£n h·ªìi c·ªßa b·∫°n d∆∞·ªõi d·∫°ng m·ªôt ƒë·ªëi t∆∞·ª£ng JSON c√≥ hai kh√≥a: "storyPart" v√† "choices".
      "storyPart" ph·∫£i l√† m·ªôt chu·ªói ch·ª©a ƒëo·∫°n truy·ªán.
      "choices" ph·∫£i l√† m·ªôt m·∫£ng g·ªìm hai chu·ªói, m·ªói chu·ªói l√† m·ªôt l·ª±a ch·ªçn ri√™ng bi·ªát. N·∫øu c√¢u chuy·ªán n√™n k·∫øt th√∫c, h√£y ƒë·ªÉ m·∫£ng "choices" tr·ªëng.`;

      const newChat = ai.chats.create({
        model: 'gemini-2.5-flash',
        config: {
          systemInstruction,
          responseMimeType: "application/json",
          responseSchema: responseSchema,
        },
      });

      setChat(newChat);

      const initialPrompt = `B·∫Øt ƒë·∫ßu m·ªôt c√¢u chuy·ªán d·ª±a tr√™n c√°c chi ti·∫øt sau:
      - Nh√¢n v·∫≠t ch√≠nh: ${preferences.characterName || 'm·ªôt ng∆∞·ªùi b·∫°n d≈©ng c·∫£m'}
      - B·∫°n b√®: ${preferences.friendName || 'm·ªôt ng∆∞·ªùi b·∫°n ƒë·ªìng h√†nh trung th√†nh'}
      - Th√∫ c∆∞ng: ${preferences.petName || 'm·ªôt con v·∫≠t'} l√† ${preferences.petType || 'b√≠ ·∫©n'}
      - Ch·ªß ƒë·ªÅ: ${preferences.topic}
      - B√†i h·ªçc/Th√¥ng ƒëi·ªáp: ${preferences.lesson || 'kh√°m ph√° nh·ªØng ƒëi·ªÅu m·ªõi m·∫ª'}
      - Tr√¨nh ƒë·ªô ƒë·ªçc: ${preferences.readingLevel}`;
      
      const response = await newChat.sendMessage({ message: initialPrompt });

      const parsedResponse: StoryResponse = JSON.parse(response.text);

      setStoryParts([parsedResponse.storyPart]);
      setChoices(parsedResponse.choices);
      setIsStoryStarted(true);

    } catch (e) {
      console.error(e);
      setError("ƒê√£ x·∫£y ra l·ªói khi t·∫°o c√¢u chuy·ªán. Vui l√≤ng th·ª≠ l·∫°i.");
    } finally {
      setIsLoading(false);
    }
  }, []);

  const handleSelectChoice = useCallback(async (choice: string) => {
    if (!chat) return;

    setIsLoading(true);
    setError(null);

    try {
      const response = await chat.sendMessage({ message: `Ng∆∞·ªùi d√πng ƒë√£ ch·ªçn: "${choice}". H√£y ti·∫øp t·ª•c c√¢u chuy·ªán.` });
      
      const parsedResponse: StoryResponse = JSON.parse(response.text);
      
      setStoryParts(prev => [...prev, parsedResponse.storyPart]);
      setChoices(parsedResponse.choices);

    } catch (e) {
      console.error(e);
      setError("ƒê√£ x·∫£y ra l·ªói khi ti·∫øp t·ª•c c√¢u chuy·ªán. Vui l√≤ng th·ª≠ l·∫°i.");
    } finally {
      setIsLoading(false);
    }
  }, [chat]);

  const handleReset = useCallback(() => {
    setIsStoryStarted(false);
    setStoryParts([]);
    setChoices([]);
    setError(null);
    setChat(null);
  }, []);
  
  return (
    <main className="min-h-screen w-full flex flex-col items-center justify-center p-4 md:p-8 bg-gradient-to-br from-amber-200 to-orange-200">
      <header className="text-center mb-8">
        <h1 className="text-4xl md:text-6xl font-serif-display font-extrabold text-amber-900">
          Th∆∞ vi·ªán Gi·∫•c M∆° üìö‚ú®
        </h1>
        <p className="text-lg md:text-xl text-amber-800 mt-2">N∆°i m·ªói l·ª±a ch·ªçn d·ªát n√™n m·ªôt c√¢u chuy·ªán</p>
      </header>
      
      {error && (
        <div className="my-4 p-4 bg-red-100 border border-red-400 text-red-700 rounded-lg max-w-2xl w-full text-center">
          <p>{error}</p>
          <button onClick={handleReset} className="mt-2 font-bold underline">Th·ª≠ l·∫°i</button>
        </div>
      )}

      {!isStoryStarted ? (
        <StoryForm onStartStory={handleStartStory} isLoading={isLoading} />
      ) : (
        <StoryDisplay
          storyParts={storyParts}
          choices={choices}
          isLoading={isLoading}
          onSelectChoice={handleSelectChoice}
          onReset={handleReset}
        />
      )}
      <footer className="mt-8 text-center text-amber-700">
        <p>ƒê∆∞·ª£c t·∫°o ra v·ªõi tr√≠ tu·ªá nh√¢n t·∫°o Gemini</p>
      </footer>
    </main>
  );
};

export default App;
